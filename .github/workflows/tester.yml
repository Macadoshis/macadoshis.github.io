name: M3U tester

on:
  push:
    branches: [ main ]
  workflow_call:
    inputs:
      streamTester:
        description: 'M3U stream tester'
        type: string
        required: true
    secrets:
      BB_USERNAME:
        required: true
      BB_TOKEN:
        required: true
      PGP_PWD:
        required: true
      GIT_USERNAME:
        required: true
      GIT_USEREMAIL:
        required: true

  workflow_dispatch:
    inputs:
      m3u:
        description: 'M3U file'
        required: false
        default: ''
      minSuccess:
        description: 'M3U tester min success'
        required: true
        default: 3
      maxFailures:
        description: 'M3U tester max failures'
        required: true
        default: 50
      streamTester:
        description: 'M3U stream tester'
        type: choice
        options:
          - ffmpeg
          - http
        required: true
        default: ffmpeg

  schedule:
    - cron: '30 22 * * *'  # Runs at 22:30 UTC
    - cron: '0 7 * * *'    # Runs at 07:00 UTC

concurrency:
  group: tester-queue
  cancel-in-progress: false

jobs:
  m3u-tester:
    runs-on: ubuntu-latest
    steps:
      - name: Clone source repo
        run: |
          git config --global credential.helper ""
          REPO_URL="https://bitbucket.org/SaadBenbouzid/m3u.git"
          git clone https://${BITBUCKET_USERNAME}:${BITBUCKET_APP_PASSWORD}@${REPO_URL#https://}
        env:
          BITBUCKET_USERNAME: ${{ secrets.BB_USERNAME }}
          BITBUCKET_APP_PASSWORD: ${{ secrets.BB_TOKEN }}
      - name: Clone stalker repo
        run: |
          git clone https://github.com/Macadoshis/stalker-to-m3u.git
      - name: Configure NODE
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}
      - name: Restore m3u files
        run: |
          cd m3u
          chmod u+x *.sh
          ./restore.sh > /dev/null
          echo "`ls *.m3u | wc -l` files restored"
        env:
          PGP_PWD: ${{ secrets.PGP_PWD }}
      - name: Update summary
        run: |
          cd m3u
          echo "## CURRENT content" >> $GITHUB_STEP_SUMMARY
          echo -e "| Type    | \u274C #                   | \u2705 #                  |" >> $GITHUB_STEP_SUMMARY
          echo -e "|---------|----------------------------|---------------------------|" >> $GITHUB_STEP_SUMMARY
          echo -e "| IPTV    | `ls _iptv-*.m3u | wc -l || echo "0"`   | `ls iptv-*.m3u | wc -l || echo "0"`   |" >> $GITHUB_STEP_SUMMARY
          echo -e "| VOD     | `ls _vod-*.m3u | wc -l || echo "0"`    | `ls vod-*.m3u | wc -l || echo "0"`    |" >> $GITHUB_STEP_SUMMARY
          echo -e "| SERIES  | `ls _series-*.m3u | wc -l || echo "0"` | `ls series-*.m3u | wc -l || echo "0"` |" >> $GITHUB_STEP_SUMMARY
      - name: Prepare m3u files
        run: |
          cd m3u
          if [[ -z "${{ inputs.m3u }}" ]]; then
            echo "Resetting m3u..."
            ./reset.sh > /dev/null
          else
            echo "NOT resetting m3u..."
            mv "_${{ inputs.m3u }}" ${{ inputs.m3u }} && echo "${{ inputs.m3u }} has been reset" || echo "No _${{ inputs.m3u }} to reset"
          fi

      - name: Prepare stalker environment
        run: |
          cd stalker-to-m3u
          node -v
          npm -v
          npm config set loglevel info
          chmod u+x configure
          chmod u+x tools/m3u-tester
          # ./configure
          npm install
          sudo add-apt-repository ppa:savoury1/ffmpeg4
          sudo apt update
          sudo apt install ffmpeg
          rm -rf ffmpeg ffprobe
          ln -s "$(which ffmpeg)" ./ffmpeg
          ln -s "$(which ffprobe)" ./ffprobe
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h
      - name: Run M3U tester
        run: |
          cd stalker-to-m3u
          # do not output progression
          tools/./m3u-tester --m3uLocation="../m3u/${{ inputs.m3u }}" --minSuccess=${{ inputs.minSuccess || 3 }} --maxFailures=${{ inputs.maxFailures || 50 }} --renamePrefix="_" --renameOnFailure="true" --threadsCount=10 --streamTester=${{ inputs.streamTester || 'ffmpeg' }} > /dev/null 2>&1
      - name: Update summary
        run: |
          cd m3u
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## RESULT content" >> $GITHUB_STEP_SUMMARY
          echo -e "| Type    | \u274C #                   | \u2705 #                  |" >> $GITHUB_STEP_SUMMARY
          echo -e "|---------|----------------------------|---------------------------|" >> $GITHUB_STEP_SUMMARY
          echo -e "| IPTV    | `ls _iptv-*.m3u | wc -l || echo "0"`   | `ls iptv-*.m3u | wc -l || echo "0"`   |" >> $GITHUB_STEP_SUMMARY
          echo -e "| VOD     | `ls _vod-*.m3u | wc -l || echo "0"`    | `ls vod-*.m3u | wc -l || echo "0"`    |" >> $GITHUB_STEP_SUMMARY
          echo -e "| SERIES  | `ls _series-*.m3u | wc -l || echo "0"` | `ls series-*.m3u | wc -l || echo "0"` |" >> $GITHUB_STEP_SUMMARY
      - name: Push M3U results
        run: |
          cd m3u
          git config user.email "${{ secrets.GIT_USEREMAIL }}"
          git config user.name "${{ secrets.GIT_USERNAME }}"
          ./copy.sh > /dev/null
        env:
          PGP_PWD: ${{ secrets.PGP_PWD }}